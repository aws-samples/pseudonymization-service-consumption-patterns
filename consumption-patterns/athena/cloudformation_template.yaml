AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: An AWS Serverless Specification template describing your function.
Parameters:
  EPURL:
    Type: String
Resources:
#----------------------------Lambda Functions----------------------------
  LambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: com.amazonaws.samples.PseudonymizerUDF
      Runtime: java11
      CodeUri: ./target/athena-pseudonymization-udf-1.0-SNAPSHOT.jar
      Description: 'Lambda function that works as UDF for Athena query'
      MemorySize: 1024
      Timeout: 60
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          SECRET_NAME: !Sub "EncryptionKeys-${AWS::StackName}"
          SECRET_REGION: !Sub ${AWS::Region}
          EP_URL: !Ref EPURL
#--------------------------------Roles-----------------------------------
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref LambdaCWPermissionsPolicy
        - !Ref LambdaEncryptionPermissionsPolicy
#-------------------------------Policies---------------------------------
  LambdaCWPermissionsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
              - 'logs:GetLogEvents'
              - 'logs:CreateLogGroup'
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*'
  LambdaEncryptionPermissionsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - 
            Effect: Allow
            Action:
              - 'secretsmanager:GetSecretValue'
              - 'secretsmanager:DescribeSecret'
              - 'secretsmanager:ListSecretVersionIds'
              - 'secretsmanager:TagResource'
              - 'secretsmanager:UntagResource'
            Resource: !Ref EncryptionKeys
          - 
            Effect: Allow
            Action:
              - 'kms:DescribeKey'
              - 'kms:Decrypt'
            Resource: !GetAtt 'KmsKeyId.Arn'
#----------------------------SecretManager--------------------------------
  EncryptionKeys:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      KmsKeyId: !Ref KmsKeyId
      Name: !Sub "EncryptionKeys-${AWS::StackName}"
#--------------------------------KMS-------------------------------------
  KmsKeyId: 
    Type: AWS::KMS::Key
    Properties: 
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Id: default
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: 'kms:*'
            Resource: '*'
      KeySpec: SYMMETRIC_DEFAULT
 #------------------------------Outputs-----------------------------------   
Outputs:
  LambdaArn:
    Value:
      Fn::GetAtt:
        - LambdaFunction
        - Arn
